Hi, I'm Mat Dalgleish and this is an introduction to game audio with FMOD for Unity aimed at level four students.This is a short presentation and it, plus its accompanying webpage, will introduce some key terms relating to game sound, explore what audio middleware is, why it might be used, and why you might use FMOD in particular. It will then demonstrate a simple game audio implementation using FMOD for Unity and generally give you a taste of your upcoming class.Because Droumeva (2011) identified that a lack of shared or common terminology was a sticking point when it came to thinking or talking about game audio, we'll start with a couple of key terms from Karen Collins. The first is adaptive audio... this is sound that reacts to game states, or responds to various in-game parameters rather than to direct input from the player. We can contrast that with interactive audio, which is sound that reacts to gameplay but in response to the player's direct input if we examine for a moment this example sound which is implemented directly in the Unity game engine and it's from the karting micro game that's one of the recommended [by FMOD] starting points for game sound. I've muted the sounds other than the cart's engine, and let's play that. [SOUND] We can notice that it's interactive audio - it's sound that responds to my input as the player,in particular to me pressing the accelerator key, but really, it's limited in terms of its sound quality... it's quite basic, it's not very realistic, it starts to grate... and it's also limited in terms of its interactivity or [rather] the quality of its interactivity... it doesn't feel very responsive, and this is where audio middleware might come in.Audio middleware is software that sits between the linear world of the door and sound or music creation and the non-linear world of the game engine and it lets you link sounds to game objects such as animations to scripted events or to particular areas within the game world. It speeds up the development process particularly of more sophisticated gameaudio implementations, but it also gives you far greater control in terms of sound design the mix and the behaviours of sounds and, overall, it offers increased independence for the audio team - they can work in parallel to the other aspects of the game's development and it reduces the need for programmers, or the reliance on programmers, for instance forintegration. There are two main audio middlewares that are widely used within industry. Wwise has been used on a greater number of AAA titles and then the other commonly used audio middleware is FMOD which has been more widely used within indie games development because of some of the specifics of its license. We're going to use FMOD because of its more door-like interface if you're from a music production background this kind of interface is perhaps more familiar and offers a gentler introduction to the subject. We have a process that has five broad stages, so to implement audio within FMOD for Unity we'd first record our audio/create our audio - we're going to use pre-recorded sounds here for the sake of getting up and running quickly. We then edit our sounds within a DAW of our choosing (Cubase or Logic or Pro Tools, whatever we might want to use) and then import our edited audio into FMOD studio, arrange the basic aspects of the sound there and then we'd integrate the FMOD for Unity plugin into our Unity game project which is the kart micro-game in this case, and then finally we'd set the parameters and triggers for the audio and then we'd have the game engine communicating, sending events to the FMOD for Unity plug-in into which we've imported our sound bank so this is from one of the FMOD examples, it's a car engine sound, and you can hear the difference. So we have ourengine sound, which is a composite -- as I said it's one of the examples within FMOD studio - [and] we just scroll through this we can hear the sound. [SOUND] We then export the sandbank and we then import it into FMOD for unity plugin working within Unity now and we set up the connection between the object in the game the kart's engine object in this case and the sound and we get this. [SOUND] Okay and I'll close with just showing you how you might tweak this sound, so although it's already perhaps more realistic more interesting and more dynamic than the original audio which was implemented just within Unity with this sound running within FMOD for Unity, without going back into FMOD we can still make some useful adjustments - to further increase the realism or perhaps create even a more cartoonish effect if we're not interested in in realism. We can for instance change the minimum and maximum rpm values to further enhance the behaviour of that sound and I'll close with a bibliography that offers a mixture of sources that I've used in this presentation, some further reading and watching on the topics that I've mentioned, and also an idea of what's coming up in your class and the basis for that. Thanks for watching.